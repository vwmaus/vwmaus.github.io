#!/usr/bin/env bash

set -e  # Exit on any error
set -u  # Treat unset variables as errors

SRC_BRANCH="master"
DEPLOY_BRANCH="gh-pages"
BUILD_DIR="_site"
DEPLOY_DIR="../_deploy_tmp"

echo "🔁 Checking out source branch: $SRC_BRANCH"
git checkout "$SRC_BRANCH"
git pull origin "$SRC_BRANCH"

echo "🧹 Cleaning previous build..."
rm -rf "$BUILD_DIR"
bundle exec jekyll build

echo "📁 Preparing deploy directory..."
rm -rf "$DEPLOY_DIR"
git worktree prune

# Remove stale worktree reference if it exists
if git worktree list | grep -q "$DEPLOY_DIR"; then
    git worktree remove "$DEPLOY_DIR" --force
fi

# Ensure the deploy branch exists locally
echo "📥 Fetching $DEPLOY_BRANCH from origin..."
git fetch origin "$DEPLOY_BRANCH":"$DEPLOY_BRANCH"

echo "🌿 Adding worktree for $DEPLOY_BRANCH..."
git worktree add "$DEPLOY_DIR" "$DEPLOY_BRANCH"

echo "📦 Copying site contents to deploy directory..."
rsync -a --delete "$BUILD_DIR/" "$DEPLOY_DIR/"

echo "📄 Creating .nojekyll..."
touch "$DEPLOY_DIR/.nojekyll"

echo "🧼 Filtering out R-related files before commit..."
MAIN_REPO=$(pwd)

# Define R-related file patterns
R_PATTERNS="-name index_cache -o -name index_data -o -name .Rhistory -o -name '*.RData' -o -name .Rproj.user"

# Stage all changes
git -C "$DEPLOY_DIR" add -A

# Unstage R-related files (use relative paths)
find "$DEPLOY_DIR" \( $R_PATTERNS \) -print0 2>/dev/null | while IFS= read -r -d '' file; do
    rel_path="${file#$DEPLOY_DIR/}"
    git -C "$DEPLOY_DIR" reset -- "$rel_path" || true
done

# Get last commit message from source branch
COMMIT_MSG=$(git -C "$MAIN_REPO" log -1 --pretty=%B)

# Commit the deploy (if needed)
git -C "$DEPLOY_DIR" commit -m "$COMMIT_MSG [ci skip]" || echo "Nothing to commit"

echo "🚀 Pushing to $DEPLOY_BRANCH"
git push origin "$DEPLOY_BRANCH"

echo "✅ Deployment complete."

# Cleanup
git worktree remove "$DEPLOY_DIR" --force
