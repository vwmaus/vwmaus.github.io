#!/usr/bin/env bash

set -e  # Exit on any error
set -u  # Treat unset variables as errors

SRC_BRANCH="master"
DEPLOY_BRANCH="gh-pages"
BUILD_DIR="_site"
DEPLOY_DIR="../_deploy_tmp"

echo "🔁 Checking out source branch: $SRC_BRANCH"
git checkout $SRC_BRANCH
git pull origin $SRC_BRANCH

echo "🧹 Cleaning previous build..."
rm -rf "$BUILD_DIR"
bundle exec jekyll build

echo "📁 Preparing deploy directory..."
rm -rf "$DEPLOY_DIR"
git worktree prune

# Remove stale worktree reference if exists
if git worktree list | grep -q "$DEPLOY_DIR"; then
    git worktree remove "$DEPLOY_DIR" --force
fi

git worktree add "$DEPLOY_DIR" "$DEPLOY_BRANCH"
echo "Contents of $DEPLOY_DIR:"
ls -al "$DEPLOY_DIR"
cat "$DEPLOY_DIR/.git" || echo ".git file not found"

echo "📦 Copying site contents to deploy directory..."
rsync -a --delete "$BUILD_DIR/" "$DEPLOY_DIR/"

echo "📄 Creating .nojekyll..."
touch "$DEPLOY_DIR/.nojekyll"

echo "🧼 Filtering out R-related files before commit..."
MAIN_REPO=$(pwd)

git -C "$DEPLOY_DIR" add -A

# Remove R-related files from staging
RESET_FILES=$(find "$DEPLOY_DIR" \( $R_PATTERNS \) 2>/dev/null || true)
if [[ -n "$RESET_FILES" ]]; then
    git -C "$DEPLOY_DIR" reset -- $RESET_FILES || true
fi

# Get last commit message from source branch
COMMIT_MSG=$(git -C "$MAIN_REPO" log -1 --pretty=%B)

git -C "$DEPLOY_DIR" commit -m "$COMMIT_MSG [ci skip]" || echo "Nothing to commit"


echo "🚀 Pushing to $DEPLOY_BRANCH"
git push origin "$DEPLOY_BRANCH"

echo "✅ Deployment complete."

# Cleanup
cd ..
git worktree remove "$DEPLOY_DIR" --force
